# .github/workflows/deploy-to-pi5.yml
name: App CD : Deploy App Image from GHCR to Pi5

on:
  workflow_dispatch:
    inputs:
      # Optional: keep this if you want to manually override the image at dispatch
      environment:
        description: "Deployment Environment (leave blank for Dev/QA, input P for production deployment"
        required: false
        type: string
        default: ""
      image-name:
        description: "GHCR Image name to deploy(leave blank if Repo variable is set as IMAGE_NAME and used as Image name)"
        required: false
        type: string
        default: ""
      container-name:
        description: "Pi Container name(leave blank to use APP_NAME set in .env ). Suffix -dev/-prod will be added automatically."
        required: false
        type: string
        default: ""
      host-port:
        description: "Pi host port(leave blank to use HOST_PORT_DEV or HOST_PORT_PROD from .env based on environment)."
        required: false
        type: string
        default: ""
      container-port:
        description: "App Container port (leave blank to use .env APP_PORT)"
        required: false
        type: string
        default: ""
      tag:
        description: "Image tag"
        required: false
        type: string
        default: "latest"


jobs:
  deploy-to-pi:
    runs-on: [self-hosted, pi5, app_model_cd]

    steps:
      - uses: actions/checkout@v4

      - name: Load .env (if present)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f .env ]; then
            if grep -q '^[[:space:]]*[A-Za-z_][A-Za-z0-9_]*[[:space:]]*=' .env; then
              set -a
              # shellcheck disable=SC1091
              . ./.env
              set +a
            else
              echo "Found .env, but no VAR=VALUE lines were detected. Skipping."
            fi
          fi
          echo "APP_NAME=${APP_NAME:-}"        >> "$GITHUB_ENV"
          echo "HOST_PORT_DEV=${HOST_PORT_DEV:-}"   >> "$GITHUB_ENV"
          echo "HOST_PORT_PROD=${HOST_PORT_PROD:-}" >> "$GITHUB_ENV"
          echo "APP_PORT=${APP_PORT:-}"        >> "$GITHUB_ENV"

      - name: Resolve deployment parameters
        id: resolve
        shell: bash
        run: |
          set -euo pipefail

          # Inputs
          IN_IMAGE="${{ inputs.image-name }}"
          IN_NAME="${{ inputs.container-name }}"
          IN_HOST="${{ inputs.host-port }}"
          IN_CONT="${{ inputs.container-port }}"
          IN_TAG="${{ inputs.tag }}"
          IN_ENV="${{ inputs.environment }}"

          # Repo variable IMAGE_NAME (must be set if no input is provided)
          VAR_IMAGE="${{ vars.IMAGE_NAME }}"

          # Decide image name: input > repo variable
          if [ -n "$IN_IMAGE" ]; then
            IMAGE_NAME="$IN_IMAGE"
          else
            if [ -z "$VAR_IMAGE" ]; then
              echo "ERROR: Repository variable IMAGE_NAME is not set, and no image-name input was provided."
              echo "Set Settings → Variables → Repository variables → IMAGE_NAME (e.g., 'ghcr.io/<owner>/<repo>' or just '<repo>')."
              exit 1
            fi
            IMAGE_NAME="$VAR_IMAGE"
          fi
          # If bare name, prefix with ghcr.io/<owner>/
          if [[ "$IMAGE_NAME" != ghcr.io/* ]]; then
            IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME"
          fi

          # Env normalization: blank => dev, 'P' => prod
          case "$IN_ENV" in
            P|p) DEPLOY_ENV="prod" ;;
            *)   DEPLOY_ENV="dev"  ;;
          esac

          # Container base name (input > .env > default)
          BASE_NAME="${IN_NAME:-${APP_NAME:-pcb-app}}"
          # Add suffix to avoid collisions
          if [ "$DEPLOY_ENV" = "prod" ]; then
            CONTAINER_NAME="${BASE_NAME}-prod"
          else
            CONTAINER_NAME="${BASE_NAME}-dev"
          fi

          # Host port selection:
          # If user manually provided host-port input, use it; else choose based on environment
          if [ -n "$IN_HOST" ]; then
            HOST_PORT_VAL="$IN_HOST"
          else
            if [ "$DEPLOY_ENV" = "prod" ]; then
              HOST_PORT_VAL="${HOST_PORT_PROD:-8000}"
            else
              HOST_PORT_VAL="${HOST_PORT_DEV:-3000}"
            fi
          fi

          # Container port (input > .env > default)
          CONT_PORT_VAL="${IN_CONT:-${APP_PORT:-8080}}"

          TAG="${IN_TAG:-latest}"
          FULL_IMAGE_REF="${IMAGE_NAME}:${TAG}"

          # Basic validation
          [[ "$HOST_PORT_VAL" =~ ^[0-9]+$ ]] || { echo "HOST_PORT must be numeric"; exit 1; }
          [[ "$CONT_PORT_VAL" =~ ^[0-9]+$ ]] || { echo "CONTAINER_PORT must be numeric"; exit 1; }

          {
            echo "IMAGE_NAME=$IMAGE_NAME"
            echo "CONTAINER_NAME=$CONTAINER_NAME"
            echo "HOST_PORT=$HOST_PORT_VAL"
            echo "CONTAINER_PORT=$CONT_PORT_VAL"
            echo "TAG=$TAG"
            echo "FULL_IMAGE_REF=$FULL_IMAGE_REF"
            echo "DEPLOY_ENV=$DEPLOY_ENV"
          } >> "$GITHUB_OUTPUT"

          {
            echo "### Deployment parameters"
            echo ""
            echo "| Key | Value |"
            echo "|---|---|"
            echo "| Env | \`${DEPLOY_ENV}\` |"
            echo "| Image | \`${FULL_IMAGE_REF}\` |"
            echo "| Container name | \`${CONTAINER_NAME}\` |"
            echo "| Host port | \`${HOST_PORT_VAL}\` |"
            echo "| Container port | \`${CONT_PORT_VAL}\` |"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker image
        run: docker pull "${{ steps.resolve.outputs.FULL_IMAGE_REF }}"

      - name: Stop and remove old container with same name (if exists)
        shell: bash
        run: |
          docker stop "${{ steps.resolve.outputs.CONTAINER_NAME }}" || true
          docker rm   "${{ steps.resolve.outputs.CONTAINER_NAME }}" || true

      - name: Check for host-port conflicts
        shell: bash
        run: |
          set -euo pipefail
          PORT="${{ steps.resolve.outputs.HOST_PORT }}"
          NAME="${{ steps.resolve.outputs.CONTAINER_NAME }}"

          CONFLICTS=$(docker ps --format '{{.Names}} {{.Ports}}' \
            | grep -E "0\.0\.0\.0:${PORT}->|\\[::\\]:${PORT}->" \
            | awk '{print $1}' \
            | grep -v "^${NAME}$" || true)

          if [ -n "$CONFLICTS" ]; then
            echo "ERROR: Host port ${PORT} is already in use by: ${CONFLICTS}"
            echo "Pick a different host port, stop the conflicting container(s), or use a reverse proxy."
            exit 1
          fi

      - name: Verify model mount directory exists on Pi
        shell: bash
        run: |
          test -d /opt/edge/models || { echo "Missing /opt/edge/models"; exit 1; }
          ls -l /opt/edge/models || true
          readlink -f /opt/edge/models/current.onnx || echo "Note: current.onnx not set yet"

      - name: Run new container
        shell: bash
        run: |
          set -euo pipefail
          EXTRA='${{ inputs.extra-args }}'
          if [ -n "$EXTRA" ]; then
            EXTRA_ARR=($EXTRA)
          else
            EXTRA_ARR=()
          fi

          docker run -d \
            --name "${{ steps.resolve.outputs.CONTAINER_NAME }}" \
            --restart unless-stopped \
            -v /opt/edge/models:/opt/edge/models:ro \
            -p ${{ steps.resolve.outputs.HOST_PORT }}:${{ steps.resolve.outputs.CONTAINER_PORT }} \
            -l app.env=${{ steps.resolve.outputs.DEPLOY_ENV }} \
            -l org.opencontainers.image.source=${{ github.repository }} \
            -l org.opencontainers.image.revision=${{ github.sha }} \
            "${EXTRA_ARR[@]}" \
            "${{ steps.resolve.outputs.FULL_IMAGE_REF }}"

      - name: Verify deployment
        shell: bash
        run: |
          echo "Container status:"
          docker ps --filter "name=${{ steps.resolve.outputs.CONTAINER_NAME }}"
          echo ""
          echo "Recent logs:"
          docker logs --tail 50 "${{ steps.resolve.outputs.CONTAINER_NAME }}" || echo "Container might still be starting up..."
