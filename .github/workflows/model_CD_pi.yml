name: Model CD - Ship latest ONNX model Pi
 
on:
  # Auto-run when a new Release is published
  release:
    types: [published]
  # Also allow manual runs
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: model-cd
  cancel-in-progress: true

jobs:
  validate:
    name: Validate ONNX (from Release)
    runs-on: ubuntu-latest
    outputs:
      model_name: ${{ steps.download.outputs.model_name }}
      model_sha:  ${{ steps.hash.outputs.model_sha }}
      short_sha:  ${{ steps.hash.outputs.short_sha }}
      utc_stamp:  ${{ steps.utc.outputs.utc_stamp }}
    steps:
      - name: Checkout repository (for workflow context)
        uses: actions/checkout@v4

      - name: Get latest release & select .onnx asset
        id: rel
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const rel = await github.rest.repos.getLatestRelease({ owner, repo });
            const assets = rel.data.assets || [];
            const onnx = assets.find(a => a.name && a.name.toLowerCase().endsWith('.onnx'));
            if (!onnx) {
              core.setFailed(`No .onnx asset found in latest release "${rel.data.tag_name}"`);
              return;
            }
            core.setOutput('tag_name', rel.data.tag_name);
            core.setOutput('asset_id', String(onnx.id));
            core.setOutput('asset_name', onnx.name);

      - name: Download ONNX asset from latest release
        id: download
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set -euo pipefail
          ASSET_ID='${{ steps.rel.outputs.asset_id }}'
          ASSET_NAME='${{ steps.rel.outputs.asset_name }}'
          echo "Downloading asset: $ASSET_NAME (id=$ASSET_ID)"
          curl -sSL \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/octet-stream" \
            -o "$ASSET_NAME" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/assets/$ASSET_ID"
          echo "MODEL_PATH=$ASSET_NAME" >> $GITHUB_ENV
          echo "model_name=$ASSET_NAME" >> $GITHUB_OUTPUT

      - name: Show file size (sanity)
        shell: bash
        run: |
          BYTES=$(stat -c%s "$MODEL_PATH")
          echo "Downloaded size: $BYTES bytes"

      - name: Setup Python and install ONNX
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install onnx
        run: pip install --quiet onnx

      - name: Run ONNX checker (structure & ops)
        shell: bash
        run: |
          python - << 'PY'
          import os, onnx
          p = os.environ["MODEL_PATH"]
          m = onnx.load(p)
          onnx.checker.check_model(m)
          print("ONNX checker: OK")
          for i in m.graph.input:
            dims = [d.dim_value if d.HasField('dim_value') else None
                    for d in i.type.tensor_type.shape.dim]
            print("Input:", i.name, dims)
          PY

      - name: Extract opset & enforce static input shape
        id: inspect
        shell: bash
        run: |
          set -e
          python - << 'PY'
          import os, sys, onnx
          p = os.environ["MODEL_PATH"]
          m = onnx.load(p)

          minv, maxv = 12, 17
          if not m.opset_import:
              print("No opset_import found"); sys.exit(1)
          opset = m.opset_import[0].version
          if not (minv <= opset <= maxv):
              print(f"Opset {opset} outside allowed range {minv}-{maxv}")
              sys.exit(1)

          def dims_of(v):
              return [d.dim_value if d.HasField('dim_value') else None
                      for d in v.type.tensor_type.shape.dim]
          inputs = {i.name: dims_of(i) for i in m.graph.input}
          for name, dims in inputs.items():
              if any(d in (None, 0) for d in dims):
                  print(f"Dynamic/unknown dims in input {name}: {dims}")
                  sys.exit(1)

          first_dims = list(inputs.values())[0] if inputs else []
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"opset={int(opset)}\n")
              f.write("input_shape=" + "x".join(map(str, first_dims)) + "\n")
          PY

      - name: Compute sha256 (identity)
        id: hash
        shell: bash
        run: |
          SHA=$(sha256sum "$MODEL_PATH" | cut -d' ' -f1)
          echo "sha256: $SHA"
          echo "$SHA  $(basename "$MODEL_PATH")" > sha256.txt
          echo "model_sha=$SHA" >> $GITHUB_OUTPUT
          echo "short_sha=${SHA:0:12}" >> $GITHUB_OUTPUT

      - name: UTC timestamp
        id: utc
        shell: bash
        run: echo "utc_stamp=$(date -u +%Y%m%d-%H%M)" >> $GITHUB_OUTPUT

      - name: Build manifest.json
        shell: bash
        run: |
          cat > manifest.json << JSON
          {
            "model_id_sha256": "${{ steps.hash.outputs.model_sha }}",
            "filename":        "${{ steps.download.outputs.model_name }}",
            "created_at_utc":  "${{ steps.utc.outputs.utc_stamp }}",
            "framework":       "onnx",
            "opset":           ${{ steps.inspect.outputs.opset }},
            "input_shape":     "${{ steps.inspect.outputs.input_shape }}",
            "quantization":    "unknown",
            "source_release":  "${{ steps.rel.outputs.tag_name }}",
            "notes":           "validated: onnx.checker + opset ${{ steps.inspect.outputs.opset }} + static input"
          }
          JSON
          cat manifest.json

      - name: Upload bundle as artifact
        uses: actions/upload-artifact@v4
        with:
          name: validated-model
          path: |
            ${{ env.MODEL_PATH }}
            sha256.txt
            manifest.json

  deliver:
    name: Deliver to Pi and flip current.onnx
    needs: validate
    runs-on: [self-hosted, app_model_cd]
    steps:
      - name: Download validated bundle
        uses: actions/download-artifact@v4
        with:
          name: validated-model

      - name: Show downloaded files
        run: ls -l

      - name: Verify sha256 on Pi (integrity)
        id: verify
        shell: bash
        run: |
          set -e
          FILE="$(find . -maxdepth 4 -type f -name '*.onnx' | head -n1)"
          echo "File: $FILE"
          SHA_LOCAL="$(sha256sum "$FILE" | cut -d' ' -f1)"
          SHA_EXPECT="${{ needs.validate.outputs.model_sha }}"
          echo "Local: $SHA_LOCAL"
          echo "Expect: $SHA_EXPECT"
          test "$SHA_LOCAL" = "$SHA_EXPECT" || (echo "SHA256 mismatch"; exit 1)
          echo "ok=true" >> $GITHUB_OUTPUT

      - name: Idempotency check (skip if already current)
        id: idem
        shell: bash
        run: |
          set -e
          TARGET_DIR="/opt/edge/models"
          EXPECT="${{ needs.validate.outputs.model_sha }}"
          if [ -L "$TARGET_DIR/current.onnx" ]; then
            CUR="$(readlink -f "$TARGET_DIR/current.onnx")"
            CUR_SHA="$(sha256sum "$CUR" | cut -d' ' -f1)"
            echo "Current: $CUR_SHA"
            echo "Expect:  $EXPECT"
            if [ "$CUR_SHA" = "$EXPECT" ]; then
              echo "skip=true" >> $GITHUB_OUTPUT
              echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) ALREADY-CURRENT model_id=$EXPECT" >> "$TARGET_DIR/deployments.log"
              exit 0
            fi
          fi
          echo "skip=false" >> $GITHUB_OUTPUT

      - name: Check free disk space (need > 200MB)
        if: steps.idem.outputs.skip != 'true'
        shell: bash
        run: |
          TARGET_DIR="/opt/edge/models"
          AVAIL_KB=$(df -Pk "$TARGET_DIR" | awk 'NR==2{print $4}')
          REQ_KB=200000
          echo "Available: ${AVAIL_KB} KB"
          if [ "$AVAIL_KB" -lt "$REQ_KB" ]; then
            echo "Not enough disk space for safe deploy"; exit 1
          fi

      - name: Stage, move, and atomic switch
        if: steps.idem.outputs.skip != 'true'
        shell: bash
        run: |
          set -e
          FILE="$(find . -maxdepth 4 -type f -name '*.onnx' | head -n1)"
          MODEL_ID="${{ needs.validate.outputs.model_sha }}"
          SHORT="${{ needs.validate.outputs.short_sha }}"
          STAMP="${{ needs.validate.outputs.utc_stamp }}"
          TARGET_DIR="/opt/edge/models"
          STAGE="$TARGET_DIR/tmp/$MODEL_ID"
          FINAL="$TARGET_DIR/models/pcb-${STAMP}-${SHORT}.onnx"
          MANIFEST_FINAL="$TARGET_DIR/manifests/pcb-${MODEL_ID}.json"

          echo "Staging at: $STAGE"
          mkdir -p "$STAGE"
          cp "$FILE" "$STAGE/model.onnx"
          cp manifest.json "$STAGE/manifest.json"

          mv "$STAGE/model.onnx" "$FINAL"
          mv "$STAGE/manifest.json" "$MANIFEST_FINAL"
          rmdir "$STAGE" || true

          if [ -L "$TARGET_DIR/current.onnx" ]; then
            OLD="$(readlink -f "$TARGET_DIR/current.onnx")"
            ln -sfn "$OLD" "$TARGET_DIR/previous.onnx"
          fi

          ln -sfn "$FINAL" "$TARGET_DIR/current.onnx"

          echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) DEPLOY model_id=${MODEL_ID} file=$(basename "$FINAL")" >> "$TARGET_DIR/deployments.log"

          echo "current.onnx -> $(readlink -f "$TARGET_DIR/current.onnx")"
          [ -L "$TARGET_DIR/previous.onnx" ] && echo "previous.onnx -> $(readlink -f "$TARGET_DIR/previous.onnx")" || echo "previous.onnx not set (first deploy)"

      - name: Retain last 10 models (prune older)
        if: steps.idem.outputs.skip != 'true'
        shell: bash
        run: |
          set -e
          TARGET_DIR="/opt/edge/models"
          MODELS_DIR="$TARGET_DIR/models"
          cd "$MODELS_DIR" || exit 0
          ls -1t pcb-*.onnx > /tmp/models_all.txt || true
          head -n 10 /tmp/models_all.txt > /tmp/keep.txt || true
          tail -n +11 /tmp/models_all.txt > /tmp/cand_delete.txt || true

          CUR="$(readlink -f "$TARGET_DIR/current.onnx")"
          PREV="$(readlink -f "$TARGET_DIR/previous.onnx" 2>/dev/null || true)"

          while read -r f; do
            [ -z "$f" ] && continue
            ABS="$MODELS_DIR/$f"
            [ "$ABS" = "$CUR" ] && { echo "Keep (current): $f"; continue; }
            [ -n "$PREV" ] && [ "$ABS" = "$PREV" ] && { echo "Keep (previous): $f"; continue; }
            echo "Deleting old model: $f"
            rm -f -- "$ABS"
          done < /tmp/cand_delete.txt

      - name: List model directory (for sanity)
        run: |
          ls -l /opt/edge/models
          ls -l /opt/edge/models/models
          ls -l /opt/edge/models/manifests