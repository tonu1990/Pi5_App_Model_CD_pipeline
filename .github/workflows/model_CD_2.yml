name: Model CD2 â€” Deploy ONNX to Pi (Release or Repo artifacts)

on:
  workflow_dispatch:
    inputs:
      model-source:
        description: >
          GithubRelease to deploy from the repo's GitHub Release;
          GithubRepo to upload and deploy from GitHub repo path /Model_dev/artifacts
        type: choice
        required: true
        default: GithubRelease
        options:
          - GithubRelease
          - GithubRepo
      release-version:
        description: >
          Release tag to deploy. Use 'latest' to take the most
          recent release. In GithubRepo mode: if 'latest', a new tag will be created.
        required: true
        default: latest
      pi-project-dir:
        description: >
          Project directory name on the Pi (under /opt/edge/<name>).
          Leave empty to use the repository name.
        required: false
        default: ""
      artifact_glob:
        description: >
          (GithubRepo mode) Glob to find ONNX under your repo, e.g. Model_dev/artifacts/*.onnx
        required: false
        default: Model_dev/artifacts/*.onnx
      artifact_name:
        description: >
          (Optional, GithubRepo mode) Exact filename to pick when multiple ONNX files match the glob.
        required: false
        default: ""

permissions:
  # Need write to create/upload Release assets in GithubRepo mode
  contents: write

concurrency:
  group: model-cd
  cancel-in-progress: true

jobs:
  prepare:
    name: Prepare Model Bundle (fetch/validate/package)
    runs-on: ubuntu-latest
    outputs:
      model_name:      ${{ steps.set-common-outputs.outputs.model_name }}
      model_sha:       ${{ steps.set-common-outputs.outputs.model_sha }}
      short_sha:       ${{ steps.set-common-outputs.outputs.short_sha }}
      utc_stamp:       ${{ steps.set-common-outputs.outputs.utc_stamp }}
      source_tag:      ${{ steps.set-common-outputs.outputs.source_tag }}
      pi_project_name: ${{ steps.repo-config.outputs.pi_project_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Pi project directory name
        id: repo-config
        shell: bash
        run: |
          if [ -z "${{ github.event.inputs.pi-project-dir }}" ]; then
            PI_PROJECT_NAME="${{ github.event.repository.name }}"
            echo "Using repository name as project directory: $PI_PROJECT_NAME"
          else
            PI_PROJECT_NAME="${{ github.event.inputs.pi-project-dir }}"
            echo "Using user-specified project directory: $PI_PROJECT_NAME"
          fi
          PI_PROJECT_NAME="$(echo "$PI_PROJECT_NAME" | sed 's/[./]//g')"
          echo "Sanitized project name: $PI_PROJECT_NAME"
          echo "pi_project_name=$PI_PROJECT_NAME" >> "$GITHUB_OUTPUT"

      # ---- SOURCE: GithubRelease ----
      - name: Get release & select .onnx asset (GithubRelease mode)
        id: rel-release
        if: ${{ github.event.inputs['model-source'] == 'GithubRelease' }}
        uses: actions/github-script@v7
        with:
          script: |
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            const tag = '${{ github.event.inputs.release-version }}' || 'latest';
            
            let release;
            if (tag === 'latest') {
              release = await github.rest.repos.getLatestRelease({ owner, repo });
            } else {
              release = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
            }
            
            const assets = release.data.assets || [];
            const onnx = assets.find(a => a.name?.toLowerCase().endsWith('.onnx'));
            if (!onnx) core.setFailed(`No .onnx asset found in release '${release.data.tag_name}'`);
            
            core.setOutput('tag_name', release.data.tag_name);
            core.setOutput('asset_id', String(onnx.id));
            core.setOutput('asset_name', onnx.name);

      - name: Download ONNX asset (GithubRelease mode)
        id: dl-release
        if: ${{ github.event.inputs['model-source'] == 'GithubRelease' }}
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set -euo pipefail
          ASSET_ID='${{ steps.rel-release.outputs.asset_id }}'
          ASSET_NAME='${{ steps.rel-release.outputs.asset_name }}'
          echo "Downloading ONNX from Release asset: $ASSET_NAME"
          curl -sSL \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/octet-stream" \
            -o "$ASSET_NAME" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/assets/$ASSET_ID"
          echo "MODEL_PATH=$ASSET_NAME" >> "$GITHUB_ENV"

      # ---- SOURCE: GithubRepo (/Model_dev/artifacts) ----
      - name: Locate ONNX in repo (GithubRepo mode)
        id: find-repo
        if: ${{ github.event.inputs['model-source'] == 'GithubRepo' }}
        shell: bash
        run: |
          set -euo pipefail
          GLOB="${{ github.event.inputs.artifact_glob }}"
          NAME_FILTER="${{ github.event.inputs.artifact_name }}"
          echo "Searching for ONNX with glob: $GLOB"
          mapfile -t hits < <(ls -1 $GLOB 2>/dev/null | grep -E '\.onnx$' || true)
          if [ "${#hits[@]}" -eq 0 ]; then
            echo "No ONNX files found under $GLOB"; exit 1
          fi
          SELECTED=""
          if [ -n "$NAME_FILTER" ]; then
            for f in "${hits[@]}"; do
              base="$(basename "$f")"
              if [ "$base" = "$NAME_FILTER" ]; then SELECTED="$f"; break; fi
            done
            if [ -z "$SELECTED" ]; then
              echo "artifact_name='$NAME_FILTER' not found among matches:"
              printf ' - %s\n' "${hits[@]}"; exit 1
            fi
          else
            SELECTED="${hits[0]}"
            if [ "${#hits[@]}" -gt 1 ]; then
              echo "WARNING: multiple ONNX found. Using first: $SELECTED"
              printf 'All matches:\n'; printf ' - %s\n' "${hits[@]}"
            fi
          fi
          echo "Chosen ONNX: $SELECTED"
          echo "MODEL_PATH=$SELECTED" >> "$GITHUB_ENV"
          echo "repo_model_name=$(basename "$SELECTED")" >> "$GITHUB_OUTPUT"

      - name: Early stamp & sha (GithubRepo mode)
        id: early-meta
        if: ${{ github.event.inputs['model-source'] == 'GithubRepo' }}
        shell: bash
        run: |
          set -euo pipefail
          STAMP="$(date -u +%Y%m%d-%H%M)"
          SHA="$(sha256sum "$MODEL_PATH" | cut -d' ' -f1)"
          SHORT="${SHA:0:12}"
          echo "utc_stamp=$STAMP" >> "$GITHUB_OUTPUT"
          echo "model_sha=$SHA"   >> "$GITHUB_OUTPUT"
          echo "short_sha=$SHORT" >> "$GITHUB_OUTPUT"

      - name: Ensure Release exists & upload asset (GithubRepo mode)
        id: rel-repo
        if: ${{ github.event.inputs['model-source'] == 'GithubRepo' }}
        uses: actions/github-script@v7
        env:
          GH_TOKEN:  ${{ github.token }}
          UTC_STAMP: ${{ steps.early-meta.outputs.utc_stamp }}
          SHORT_SHA: ${{ steps.early-meta.outputs.short_sha }}
        with:
          script: |
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            const requestedTag = '${{ github.event.inputs.release-version }}' || 'latest';
            const modelPath = process.env.MODEL_PATH;
            const fs = require('fs');
            const path = require('path');

            // Tag selection: use provided tag if not 'latest'; else synthesize
            let tag = requestedTag;
            if (tag === 'latest') {
              const short = process.env['SHORT_SHA'];
              const stamp = process.env['UTC_STAMP'];
              tag = `model-${stamp || 'now'}-${short || 'unknown'}`;
            }

            // Create the release if needed
            let release;
            try {
              release = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
              core.info(`Using existing release: ${release.data.tag_name}`);
            } catch (e) {
              if (e.status === 404) {
                release = await github.rest.repos.createRelease({
                  owner, repo, tag_name: tag, name: `Model ${tag}`, draft: false, prerelease: false
                });
                core.info(`Created release: ${release.data.tag_name}`);
              } else {
                core.setFailed(`Error getting/creating release: ${e.message}`);
                return;
              }
            }

            // Upload asset (replace if same name already exists)
            const assetName = path.basename(modelPath);
            const assets = (await github.rest.repos.listReleaseAssets({ owner, repo, release_id: release.data.id })).data;
            const existing = assets.find(a => a.name === assetName);
            if (existing) {
              await github.rest.repos.deleteReleaseAsset({ owner, repo, asset_id: existing.id });
              core.info(`Deleted existing asset: ${assetName}`);
            }

            const stat = fs.statSync(modelPath);
            const uploadUrl = release.data.upload_url;
            const data = fs.readFileSync(modelPath);
            const uploaded = await github.request({
              method: 'POST',
              url: uploadUrl,
              headers: { 'content-type': 'application/octet-stream', 'content-length': stat.size },
              name: assetName,
              data
            });
            core.info(`Uploaded asset: ${assetName} (status ${uploaded.status})`);

            core.setOutput('tag_name', tag);
            core.setOutput('asset_name', assetName);

      # ---- Common validation (both modes) ----
      - name: Show file size
        shell: bash
        run: |
          BYTES=$(stat -c%s "$MODEL_PATH")
          echo "Model file: $MODEL_PATH"
          echo "Size: $BYTES bytes"

      - name: Setup Python & install onnx
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Validate ONNX structure/opset/static shape
        shell: bash
        run: |
          python - << 'PY'
          import os, onnx
          p = os.environ["MODEL_PATH"]
          m = onnx.load(p)
          onnx.checker.check_model(m)
          minv, maxv = 12, 17
          opset = m.opset_import[0].version if m.opset_import else None
          if opset is None or not (minv <= opset <= maxv):
              raise SystemExit(f"Opset {opset} outside allowed range {minv}-{maxv}")
          def dims(v): return [d.dim_value if d.HasField('dim_value') else None for d in v.type.tensor_type.shape.dim]
          for i in m.graph.input:
              ds = dims(i)
              if any(d in (None, 0) for d in ds):
                  raise SystemExit(f"Dynamic/unknown dims in input {i.name}: {ds}")
          print("ONNX validation: OK")
          PY

      - name: Set common outputs
        id: set-common-outputs
        shell: bash
        run: |
          set -euo pipefail
          SHA=$(sha256sum "$MODEL_PATH" | cut -d' ' -f1)
          SHORT="${SHA:0:12}"
          STAMP="${{ steps.early-meta.outputs.utc_stamp }}"
          if [ -z "$STAMP" ]; then STAMP="$(date -u +%Y%m%d-%H%M)"; fi
          if [ "${{ github.event.inputs.model-source }}" = "GithubRelease" ]; then
            SRC_TAG='${{ steps.rel-release.outputs.tag_name }}'
          else
            SRC_TAG='${{ steps.rel-repo.outputs.tag_name }}'
          fi
          NAME="$(basename "$MODEL_PATH")"
          echo "model_sha=$SHA"      >> "$GITHUB_OUTPUT"
          echo "short_sha=$SHORT"    >> "$GITHUB_OUTPUT"
          echo "utc_stamp=$STAMP"    >> "$GITHUB_OUTPUT"
          echo "source_tag=$SRC_TAG" >> "$GITHUB_OUTPUT"
          echo "model_name=$NAME"    >> "$GITHUB_OUTPUT"

      - name: Build manifest.json
        shell: bash
        run: |
          cat > manifest.json << JSON
          {
            "model_id_sha256": "${{ steps.set-common-outputs.outputs.model_sha }}",
            "filename":        "${{ steps.set-common-outputs.outputs.model_name }}",
            "deployed_at_utc": "${{ steps.set-common-outputs.outputs.utc_stamp }}",
            "source_repository": "${{ github.repository }}",
            "source_release":    "${{ steps.set-common-outputs.outputs.source_tag }}",
            "pi_project_directory": "${{ steps.repo-config.outputs.pi_project_name }}"
          }
          JSON
          cat manifest.json

      - name: Upload bundle for delivery
        uses: actions/upload-artifact@v4
        with:
          name: model-bundle
          path: |
            ${{ env.MODEL_PATH }}
            manifest.json

  deliver:
    name: Deliver to Pi & flip current.onnx
    needs: prepare
    # Ensure these match your Pi runner labels
    runs-on: [self-hosted, app_model_cd]
    steps:
      - name: Download model bundle
        uses: actions/download-artifact@v4
        with:
          name: model-bundle

      - name: Show deployment context
        run: |
          echo "Source repo:     ${{ github.repository }}"
          echo "Source release:  ${{ needs.prepare.outputs.source_tag }}"
          echo "Pi project dir:  ${{ needs.prepare.outputs.pi_project_name }}"
          echo "Bundle files:" && ls -l

      - name: Ensure project layout on Pi
        id: layout
        shell: bash
        run: |
          BASE="/opt/edge/${{ needs.prepare.outputs.pi_project_name }}"
          sudo mkdir -p "$BASE/models" "$BASE/manifests" "$BASE/tmp"
          sudo touch "$BASE/deployments.log"
          sudo chown -R $USER:$USER "$BASE" || true
          sudo chmod -R 755 "$BASE"
          echo "target_base=$BASE" >> "$GITHUB_OUTPUT"
          echo "Layout:" && ls -la "$BASE"

      - name: Verify sha256 on Pi (integrity)
        id: verify
        shell: bash
        run: |
          FILE="$(find . -maxdepth 2 -type f -name '*.onnx' | head -n1)"
          [ -z "$FILE" ] && { echo "No .onnx file in bundle"; exit 1; }
          SHA_LOCAL="$(sha256sum "$FILE" | cut -d' ' -f1)"
          SHA_EXPECT="${{ needs.prepare.outputs.model_sha }}"
          echo "Local:  $SHA_LOCAL"
          echo "Expect: $SHA_EXPECT"
          test "$SHA_LOCAL" = "$SHA_EXPECT" || (echo "SHA256 mismatch"; exit 1)

      - name: Idempotency check (skip if same as current)
        id: idem
        shell: bash
        run: |
          BASE="${{ steps.layout.outputs.target_base }}"
          EXPECT="${{ needs.prepare.outputs.model_sha }}"
          if [ -L "$BASE/current.onnx" ]; then
            CUR_TGT="$(readlink -f "$BASE/current.onnx")"
            CUR_SHA="$(sha256sum "$CUR_TGT" | cut -d' ' -f1)"
            echo "Current: $CUR_SHA"
            if [ "$CUR_SHA" = "$EXPECT" ]; then
              echo "skip=true" >> "$GITHUB_OUTPUT"
              echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) ALREADY-CURRENT model_id=$EXPECT" >> "$BASE/deployments.log"
              exit 0
            fi
          fi
          echo "skip=false" >> "$GITHUB_OUTPUT"

      - name: Check free disk space (>200MB)
        if: steps.idem.outputs.skip != 'true'
        shell: bash
        run: |
          BASE="${{ steps.layout.outputs.target_base }}"
          AVAIL_KB=$(df -Pk "$BASE" | awk 'NR==2{print $4}')
          [ "$AVAIL_KB" -lt 200000 ] && { echo "Low disk space"; exit 1; } || echo "Free OK: ${AVAIL_KB}KB"

      - name: Stage â†’ move â†’ atomic flip
        if: steps.idem.outputs.skip != 'true'
        shell: bash
        run: |
          set -e
          BASE="${{ steps.layout.outputs.target_base }}"
          FILE="$(find . -maxdepth 2 -type f -name '*.onnx' | head -n1)"
          MODEL_ID="${{ needs.prepare.outputs.model_sha }}"
          SHORT="${{ needs.prepare.outputs.short_sha }}"
          STAMP="${{ needs.prepare.outputs.utc_stamp }}"
          NAME="${{ needs.prepare.outputs.model_name }}"
          BARE="${NAME%.*}"

          FINAL="$BASE/models/${BARE}-${STAMP}-${SHORT}.onnx"
          MFN="$BASE/manifests/${BARE}-${MODEL_ID}.json"
          STAGE="$BASE/tmp/$MODEL_ID"

          mkdir -p "$STAGE"
          cp "$FILE" "$STAGE/model.onnx"
          cp manifest.json "$STAGE/manifest.json"

          mv "$STAGE/model.onnx" "$FINAL"
          mv "$STAGE/manifest.json" "$MFN"
          rmdir "$STAGE" || true

          if [ -L "$BASE/current.onnx" ]; then
            OLD="$(readlink -f "$BASE/current.onnx")"
            ln -sfn "$OLD" "$BASE/previous.onnx"
          fi
          ln -sfnr "$FINAL" "$BASE/current.onnx"

          echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) DEPLOY model_id=$MODEL_ID file=$(basename "$FINAL") release=${{ needs.prepare.outputs.source_tag }}" >> "$BASE/deployments.log"

          echo "current.onnx -> $(readlink -f "$BASE/current.onnx")"
          [ -L "$BASE/previous.onnx" ] && echo "previous.onnx -> $(readlink -f "$BASE/previous.onnx")" || echo "previous.onnx not set"

      - name: Retain last 10 models (and their manifests)
        if: steps.idem.outputs.skip != 'true'
        shell: bash
        run: |
          BASE="${{ steps.layout.outputs.target_base }}"
          MODELS="$BASE/models"
          CUR="$(readlink -f "$BASE/current.onnx")"
          PREV="$(readlink -f "$BASE/previous.onnx" 2>/dev/null || true)"
          ls -1t "$MODELS"/*.onnx > /tmp/all.txt 2>/dev/null || true
          head -n 10 /tmp/all.txt > /tmp/keep.txt 2>/dev/null || true
          tail -n +11 /tmp/all.txt > /tmp/prune.txt 2>/dev/null || true
          while read -r f; do
            [ -z "$f" ] && continue
            [ "$f" = "$CUR" ]  && { echo "Keep (current): $(basename "$f")"; continue; }
            [ -n "$PREV" ] && [ "$f" = "$PREV" ] && { echo "Keep (previous): $(basename "$f")"; continue; }
            echo "Prune: $(basename "$f")"
            base="$(basename "$f" .onnx)"
            rm -f "$BASE/manifests/${base}-"*.json 2>/dev/null || true
            rm -f -- "$f"
          done < /tmp/prune.txt

      - name: Show final tree
        shell: bash
        run: |
          BASE="${{ steps.layout.outputs.target_base }}"
          echo "=== $BASE ===" && ls -la "$BASE"
          echo "=== models ===" && ls -la "$BASE/models" || true
          echo "=== manifests ===" && ls -la "$BASE/manifests" || true
          echo "Symlinks:" && ls -la "$BASE/current.onnx" 2>/dev/null || true
          ls -la "$BASE/previous.onnx" 2>/dev/null || true