name: Deploy GUI launcher to Pi (with Uninstall + Model Mount)

on:
  workflow_dispatch:
    inputs:
      image-name:
        description: "Application image name (GHCR repo, e.g. ghcr.io/tonu1990/gstreamer_demo)"
        required: true
        type: string
        default: ""
      tag:
        description: "Image tag (used only if image-name has no tag/digest)"
        required: false
        type: string
        default: "latest"
      container-name:
        description: "Name for menu/desktop display (Docker name derives from a safe slug)"
        required: false
        type: string
        default: "EdgeAI_Pi5"
      model-mount-dir:
        description: "Host model directory. Leave blank to use /opt/edge/<repo_name>/<slug>"
        required: false
        type: string
        default: ""
      extra-args:
        description: "Additional docker run args (e.g. --device /dev/dri:/dev/dri --group-add render)"
        required: false
        type: string
        default: ""

jobs:
  deploy-to-pi:
    runs-on: [self-hosted, pi5, app_model_cd]

    steps:
      - name: Resolve inputs and compute image ref + names + model dir
        id: vars
        shell: bash
        run: |
          set -euo pipefail

          IMAGE_NAME="${{ github.event.inputs['image-name'] }}"
          TAG="${{ github.event.inputs.tag }}"
          CN_RAW="${{ github.event.inputs['container-name'] }}"
          EXTRA_ARGS="${{ github.event.inputs['extra-args'] }}"
          IN_MODEL_DIR="${{ github.event.inputs['model-mount-dir'] }}"
          REPO_NAME="${{ github.event.repository.name }}"

          if [[ -z "$IMAGE_NAME" ]]; then
            echo "image-name is required" >&2
            exit 1
          fi

          # Final image reference
          if [[ "$IMAGE_NAME" == *@sha256:* ]]; then
            IMAGE_REF="$IMAGE_NAME"
          elif [[ "$IMAGE_NAME" =~ :[^/]+$ ]]; then
            IMAGE_REF="$IMAGE_NAME"
          else
            IMAGE_REF="${IMAGE_NAME}:${TAG:-latest}"
          fi

          # Menu/desktop display name
          DISPLAY_NAME="${CN_RAW:-EdgeAI_Pi5}"

          # Docker/filename-safe slug (lowercase, spaces->-, only [a-z0-9._-])
          SLUG="$(printf '%s' "$DISPLAY_NAME" \
            | tr '[:upper:]' '[:lower:]' \
            | sed -E 's/[[:space:]]+/-/g; s/[^a-z0-9._-]//g')"
          [[ -n "$SLUG" ]] || SLUG="edgeai_pi5"

          # Model dir on host: input or default /opt/edge/<repo_name>/<slug>
          if [[ -n "$IN_MODEL_DIR" ]]; then
            HOST_MODEL_DIR="$IN_MODEL_DIR"
          else
            HOST_MODEL_DIR="/opt/edge/${REPO_NAME}/${SLUG}"
          fi

          SCRIPT_PATH="/usr/local/bin/${SLUG}.sh"
          DESKTOP_SYS="/usr/share/applications/${SLUG}.desktop"
          UN_SCRIPT_PATH="/usr/local/sbin/${SLUG}_uninstall.sh"
          UN_DESKTOP_SYS="/usr/share/applications/${SLUG}_uninstall.desktop"

          {
            echo "IMAGE_REF=$IMAGE_REF"
            echo "DISPLAY_NAME=$DISPLAY_NAME"
            echo "SLUG=$SLUG"
            echo "SCRIPT_PATH=$SCRIPT_PATH"
            echo "DESKTOP_SYS=$DESKTOP_SYS"
            echo "UN_SCRIPT_PATH=$UN_SCRIPT_PATH"
            echo "UN_DESKTOP_SYS=$UN_DESKTOP_SYS"
            echo "HOST_MODEL_DIR=$HOST_MODEL_DIR"
            echo "EXTRA_ARGS=$EXTRA_ARGS"
            echo "REPO_NAME=$REPO_NAME"
          } >> "$GITHUB_OUTPUT"

      - name: Require sudo and install GUI helpers
        shell: bash
        run: |
          if ! sudo -n true 2>/dev/null; then
            echo "Needs passwordless sudo on the runner to write system paths." >&2
            exit 1
          fi
          sudo apt-get update -y
          sudo apt-get install -y zenity policykit-1 xdg-utils || true

      - name: Pre-pull image (faster first launch)
        shell: bash
        run: |
          set -euo pipefail
          /usr/bin/docker pull "${{ steps.vars.outputs.IMAGE_REF }}"

      - name: Ensure model directory exists (host) and is readable
        shell: bash
        run: |
          set -euo pipefail
          DIR="${{ steps.vars.outputs.HOST_MODEL_DIR }}"
          sudo mkdir -p "$DIR"
          # World-readable (adjust tighter if models are sensitive)
          sudo chmod 755 "$DIR"
          # Helpful README (first time)
          if [ -z "$(ls -A "$DIR" 2>/dev/null)" ]; then
            sudo tee "$DIR/README.txt" >/dev/null <<EOF
            This is the model directory for ${{
              steps.vars.outputs.DISPLAY_NAME
            }} (repo: ${{ steps.vars.outputs.REPO_NAME }}, slug: ${{ steps.vars.outputs.SLUG }}).

            Place your model files here and point the "current.onnx" symlink
            to the active version, e.g.:
              ln -s ./v1.0.0/model.onnx current.onnx

            The container mounts this directory read-only at /models and reads:
              MODEL_DIR=/models
              MODEL_PATH=/models/current.onnx
            EOF
            sudo chmod 644 "$DIR/README.txt"
          fi
          # Non-fatal hint if current.onnx missing
          if [ ! -e "$DIR/current.onnx" ]; then
            echo "Note: $DIR/current.onnx
