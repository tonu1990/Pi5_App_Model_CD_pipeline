name: Deploy GUI launcher to Pi (with Uninstall + Model Mount)

on:
  workflow_dispatch:
    inputs:
      image-name:
        description: "Application image name (GHCR repo, e.g. ghcr.io/tonu1990/gstreamer_demo)"
        required: true
        type: string
        default: ""
      tag:
        description: "Image tag (used only if image-name has no tag/digest)"
        required: false
        type: string
        default: "latest"
      container-name:
        description: "Name for menu/desktop display (Docker name derives from a safe slug)"
        required: false
        type: string
        default: "EdgeAI_Pi5"
      pi-proj-repo:
        description: "Project folder name under /opt/edge (defaults to GitHub repo name)"
        required: false
        type: string
        default: ""
      model-mount-dir:
        description: "Host model base directory; leave blank to use /opt/edge/<pi-proj-repo-or-repo_name>"
        required: false
        type: string
        default: ""
      extra-args:
        description: "Additional docker run args (e.g. --device /dev/dri:/dev/dri --group-add render)"
        required: false
        type: string
        default: ""

jobs:
  deploy-to-pi:
    runs-on: [self-hosted, pi5, app_model_cd]

    steps:
      - name: Resolve inputs, image ref, names, and model dir
        id: vars
        shell: bash
        run: |
          set -euo pipefail

          IMAGE_NAME="${{ github.event.inputs['image-name'] }}"
          TAG="${{ github.event.inputs.tag }}"
          CN_RAW="${{ github.event.inputs['container-name'] }}"
          EXTRA_ARGS="${{ github.event.inputs['extra-args'] }}"
          IN_MODEL_DIR="${{ github.event.inputs['model-mount-dir'] }}"
          IN_PI_PROJ="${{ github.event.inputs['pi-proj-repo'] }}"
          REPO_NAME="${{ github.event.repository.name }}"

          if [[ -z "$IMAGE_NAME" ]]; then
            echo "image-name is required" >&2
            exit 1
          fi

          # Final image reference
          if [[ "$IMAGE_NAME" == *@sha256:* ]]; then
            IMAGE_REF="$IMAGE_NAME"
          elif [[ "$IMAGE_NAME" =~ :[^/]+$ ]]; then
            IMAGE_REF="$IMAGE_NAME"
          else
            IMAGE_REF="${IMAGE_NAME}:${TAG:-latest}"
          fi

          # Display name (menu label)
          DISPLAY_NAME="${CN_RAW:-EdgeAI_Pi5}"

          # Docker/filename-safe slug (lowercase, spaces->-, only [a-z0-9._-])
          SLUG="$(printf '%s' "$DISPLAY_NAME" | tr '[:upper:]' '[:lower:]' | sed -E 's/[[:space:]]+/-/g; s/[^a-z0-9._-]//g')"
          [[ -n "$SLUG" ]] || SLUG="edgeai_pi5"

          # Project folder name under /opt/edge
          PI_PROJ="${IN_PI_PROJ:-$REPO_NAME}"

          # Host model BASE dir (align with your design)
          if [[ -n "$IN_MODEL_DIR" ]]; then
            HOST_MODEL_DIR="$IN_MODEL_DIR"
          else
            HOST_MODEL_DIR="/opt/edge/${PI_PROJ}"
          fi

          SCRIPT_PATH="/usr/local/bin/${SLUG}.sh"
          DESKTOP_SYS="/usr/share/applications/${SLUG}.desktop"
          UN_SCRIPT_PATH="/usr/local/sbin/${SLUG}_uninstall.sh"
          UN_DESKTOP_SYS="/usr/share/applications/${SLUG}_uninstall.desktop"

          {
            echo "IMAGE_REF=$IMAGE_REF"
            echo "DISPLAY_NAME=$DISPLAY_NAME"
            echo "SLUG=$SLUG"
            echo "PI_PROJ=$PI_PROJ"
            echo "HOST_MODEL_DIR=$HOST_MODEL_DIR"
            echo "SCRIPT_PATH=$SCRIPT_PATH"
            echo "DESKTOP_SYS=$DESKTOP_SYS"
            echo "UN_SCRIPT_PATH=$UN_SCRIPT_PATH"
            echo "UN_DESKTOP_SYS=$UN_DESKTOP_SYS"
            echo "EXTRA_ARGS=$EXTRA_ARGS"
          } >> "$GITHUB_OUTPUT"

      - name: Require sudo and install GUI helpers
        shell: bash
        run: |
          if ! sudo -n true 2>/dev/null; then
            echo "Needs passwordless sudo on the runner to write system paths." >&2
            exit 1
          fi
          sudo apt-get update -y
          sudo apt-get install -y zenity policykit-1 xdg-utils || true

      - name: Pre-pull image (faster first launch)
        shell: bash
        run: |
          set -euo pipefail
          /usr/bin/docker pull "${{ steps.vars.outputs.IMAGE_REF }}"

      - name: Ensure model BASE directory exists (host) and is readable
        shell: bash
        run: |
          set -euo pipefail
          DIR="${{ steps.vars.outputs.HOST_MODEL_DIR }}"

          # Create base + standard subfolders if missing
          sudo mkdir -p "$DIR" "$DIR/models" "$DIR/manifests" "$DIR/tmp"
          sudo chmod 755 "$DIR" "$DIR/models" "$DIR/manifests" "$DIR/tmp"

          # Drop a README only if directory is empty (avoids heredoc pitfalls and avoids polluting existing trees)
          if [ -z "$(ls -A "$DIR" 2>/dev/null)" ]; then
            sudo bash -c "cat > '$DIR/README.txt' <<'EOF'
            This is the model base directory.

            Standard layout:
              models/           - versioned model files
              manifests/        - metadata per model
              tmp/              - staging during deployment
              current.onnx      - symlink to active model (typically relative to ./models/)
              previous.onnx     - symlink to previous model
              deployments.log   - deployment history log

            The GUI container mounts this base directory read-only at /models and reads:
              MODEL_DIR=/models
              MODEL_PATH=/models/current.onnx

            To switch models, repoint current.onnx to the desired file, e.g.:
              ln -s ./models/model_v3.onnx current.onnx
            EOF"
            sudo chmod 644 "$DIR/README.txt"
          fi

          # Non-fatal hint if current.onnx missing
          if [ ! -e "$DIR/current.onnx" ]; then
            echo "Note: $DIR/current.onnx not found yet (your app may show a 'no model' message until you add it)."
          fi

          ls -la "$DIR" || true

      - name: Install launcher script (/usr/local/bin/<slug>.sh)
        shell: bash
        run: |
          set -euo pipefail
          IMAGE="${{ steps.vars.outputs.IMAGE_REF }}"
          SLUG="${{ steps.vars.outputs.SLUG }}"
          SCRIPT_PATH="${{ steps.vars.outputs.SCRIPT_PATH }}"
          EXTRA_ARGS="${{ steps.vars.outputs.EXTRA_ARGS }}"
          HOST_MODEL_DIR="${{ steps.vars.outputs.HOST_MODEL_DIR }}"

          TMP_SCRIPT="$(mktemp)"
          cat > "$TMP_SCRIPT" << 'EOSH'
          #!/usr/bin/env bash
          set -euo pipefail

          DOCKER=/usr/bin/docker
          XHOST=/usr/bin/xhost
          ID=/usr/bin/id
          WHOAMI=/usr/bin/whoami

          IMAGE="__IMAGE__"
          CONTAINER_NAME="__SLUG__"
          LOG="/tmp/${CONTAINER_NAME}.log"

          # Host model BASE dir baked in at deploy; allow override via MODEL_MOUNT_DIR
          HOST_MODEL_DIR_DEFAULT="__HOST_MODEL_DIR__"
          HOST_MODEL_DIR="${MODEL_MOUNT_DIR:-$HOST_MODEL_DIR_DEFAULT}"

          # Determine camera device
          if [[ -n "${CAM_DEVICE:-}" ]]; then
            DEVICE="$CAM_DEVICE"
          elif [[ -e /dev/video0 ]]; then
            DEVICE="/dev/video0"
          else
            DEVICE="$(ls -1 /dev/video* 2>/dev/null | head -n1 || true)"
          fi
          if [[ -z "${DEVICE:-}" ]]; then
            echo "No /dev/video* device found" >> "$LOG"
            exit 1
          fi

          # Validate model base dir
          if [[ ! -d "$HOST_MODEL_DIR" ]]; then
            echo "Model base directory not found: $HOST_MODEL_DIR" >> "$LOG"
            exit 1
          fi

          # Writable runtime/cache dirs
          export XDG_RUNTIME_DIR="/tmp/runtime-$("$ID" -u)"
          mkdir -p "$XDG_RUNTIME_DIR" /tmp/.cache

          # Allow X access
          "$XHOST" +SI:localuser:$("$WHOAMI") >/dev/null 2>&1 || true

          DOCKER_ARGS=(
            --rm
            --name "$CONTAINER_NAME"
            --user "$("$ID" -u):$("$ID" -g)"
            -e DISPLAY="${DISPLAY:-:0}"
            -e HOME=/tmp
            -e XDG_CACHE_HOME=/tmp/.cache
            -e XDG_RUNTIME_DIR="$XDG_RUNTIME_DIR"
            -e QT_QPA_PLATFORM=xcb
            -e QT_X11_NO_MITSHM=1
            -e LIBGL_ALWAYS_SOFTWARE=1
            # Model env in container
            -e MODEL_DIR=/models
            -e MODEL_PATH=/models/current.onnx
            # X11 + camera
            -v /tmp/.X11-unix:/tmp/.X11-unix:ro
            --device "$DEVICE:$DEVICE"
            --group-add video
            # Model base mount (read-only)
            -v "$HOST_MODEL_DIR:/models:ro"
          )

          # Extra args appended (last-wins if options collide)
          exec "$DOCKER" run "${DOCKER_ARGS[@]}" __EXTRA_ARGS__ "$IMAGE" >>"$LOG" 2>&1
          EOSH

          sed -i "s|__IMAGE__|$IMAGE|g" "$TMP_SCRIPT"
          sed -i "s|__SLUG__|$SLUG|g" "$TMP_SCRIPT"
          sed -i "s|__HOST_MODEL_DIR__|$HOST_MODEL_DIR|g" "$TMP_SCRIPT"
          sed -i "s|__EXTRA_ARGS__|$EXTRA_ARGS|g" "$TMP_SCRIPT"

          sudo install -m 0755 "$TMP_SCRIPT" "$SCRIPT_PATH"
          rm -f "$TMP_SCRIPT"

      - name: Install system menu entry (/usr/share/applications/<slug>.desktop)
        shell: bash
        run: |
          set -euo pipefail
          DESKTOP_SYS="${{ steps.vars.outputs.DESKTOP_SYS }}"
          SCRIPT_PATH="${{ steps.vars.outputs.SCRIPT_PATH }}"
          DISPLAY_NAME="${{ steps.vars.outputs.DISPLAY_NAME }}"

          TMP_DESKTOP="$(mktemp)"
          cat > "$TMP_DESKTOP" <<EOF
          [Desktop Entry]
          Type=Application
          Name=${DISPLAY_NAME}
          Comment=Launch ${DISPLAY_NAME}
          Exec=${SCRIPT_PATH}
          Icon=utilities-camera
          Terminal=false
          Categories=Graphics;Video;
          StartupNotify=false
          EOF

          sed -i 's/\r$//' "$TMP_DESKTOP" || true
          sudo install -m 0755 "$TMP_DESKTOP" "$DESKTOP_SYS"
          rm -f "$TMP_DESKTOP"

          command -v xdg-desktop-menu >/dev/null && xdg-desktop-menu forceupdate || true
          command -v update-desktop-database >/dev/null && sudo update-desktop-database || true

      - name: Copy Desktop icon to ALL user desktops (best-effort)
        shell: bash
        run: |
          set -euo pipefail
          DESKTOP_SYS="${{ steps.vars.outputs.DESKTOP_SYS }}"
          DISPLAY_NAME="${{ steps.vars.outputs.DISPLAY_NAME }}"

          for u in $(getent passwd | awk -F: '$3>=1000 && $3<65000 {print $1}'); do
            home="$(getent passwd "$u" | cut -d: -f6)"
            [ -d "$home" ] || continue
            mkdir -p "$home/Desktop"
            dst="$home/Desktop/${DISPLAY_NAME}.desktop"
            sudo cp -f "$DESKTOP_SYS" "$dst"
            sudo chown "$u:$u" "$dst"
            sudo chmod +x "$dst"
            if command -v gio >/dev/null 2>&1; then
              sudo -u "$u" gio set "$dst" "metadata::trusted" true || true
            fi
            echo "Placed desktop icon for user $u at $dst"
          done

      - name: Install UNINSTALL helper (/usr/local/sbin/<slug>_uninstall.sh)
        shell: bash
        run: |
          set -euo pipefail
          SLUG="${{ steps.vars.outputs.SLUG }}"
          DISPLAY_NAME="${{ steps.vars.outputs.DISPLAY_NAME }}"
          IMAGE_REF="${{ steps.vars.outputs.IMAGE_REF }}"
          UN_SCRIPT_PATH="${{ steps.vars.outputs.UN_SCRIPT_PATH }}"

          TMP_UN="$(mktemp)"
          cat > "$TMP_UN" << 'EOSH'
          #!/usr/bin/env bash
          set -euo pipefail

          SLUG="__SLUG__"
          DISPLAY_NAME="__DISPLAY_NAME__"
          IMAGE_REF="__IMAGE_REF__"

          say_gui() {
            if command -v zenity >/dev/null 2>&1; then
              zenity --info --title="Uninstall ${DISPLAY_NAME}" --text="$1"
            else
              echo "$1"
            fi
          }

          ask_remove_image() {
            if command -v zenity >/dev/null 2>&1; then
              zenity --question --title="Uninstall ${DISPLAY_NAME}" \
                --text="Do you also want to remove the Docker image?\n\n${IMAGE_REF}" \
                --ok-label="Remove image" --cancel-label="Keep image"
              return $?
            else
              read -r -p "Remove Docker image ${IMAGE_REF}? [y/N] " ans
              [[ "$ans" =~ ^[Yy]$ ]]
              return $?
            fi
          }

          # Stop/remove container (best-effort)
          /usr/bin/docker stop "$SLUG" >/dev/null 2>&1 || true
          /usr/bin/docker rm -f "$SLUG" >/dev/null 2>&1 || true

          # Remove launcher + system menu entry
          rm -f "/usr/local/bin/${SLUG}.sh" || true
          rm -f "/usr/share/applications/${SLUG}.desktop" || true

          # Remove desktop icons and per-user menu entries for all real users
          for u in $(getent passwd | awk -F: '$3>=1000 && $3<65000 {print $1}'); do
            home="$(getent passwd "$u" | cut -d: -f6)"
            [ -d "$home" ] || continue
            rm -f "$home/Desktop/${DISPLAY_NAME}.desktop" || true
            rm -f "$home/Desktop/${DISPLAY_NAME}_uninstall.desktop" || true
            rm -f "$home/.local/share/applications/${SLUG}.desktop" || true
          done

          # Remove uninstall menu entry and logs
          rm -f "/usr/share/applications/${SLUG}_uninstall.desktop" || true
          rm -f "/tmp/${SLUG}.log" || true

          # Ask about removing the image (models are left intact by design)
          if ask_remove_image; then
            /usr/bin/docker rmi "${IMAGE_REF}" >/dev/null 2>&1 || true
          fi

          say_gui "Uninstall complete."
          EOSH

          sed -i "s|__SLUG__|$SLUG|g" "$TMP_UN"
          sed -i "s|__DISPLAY_NAME__|$DISPLAY_NAME|g" "$TMP_UN"
          sed -i "s|__IMAGE_REF__|$IMAGE_REF|g" "$TMP_UN"

          sudo install -m 0755 "$TMP_UN" "$UN_SCRIPT_PATH"
          rm -f "$TMP_UN"

      - name: Install UNINSTALL menu entry (/usr/share/applications/<slug>_uninstall.desktop)
        shell: bash
        run: |
          set -euo pipefail
          UN_SCRIPT_PATH="${{ steps.vars.outputs.UN_SCRIPT_PATH }}"
          UN_DESKTOP_SYS="${{ steps.vars.outputs.UN_DESKTOP_SYS }}"
          DISPLAY_NAME="${{ steps.vars.outputs.DISPLAY_NAME }}"

          TMP_DU="$(mktemp)"
          cat > "$TMP_DU" <<EOF
          [Desktop Entry]
          Type=Application
          Name=${DISPLAY_NAME}_uninstall
          Comment=Uninstall ${DISPLAY_NAME}
          Exec=pkexec ${UN_SCRIPT_PATH}
          Icon=utilities-terminal
          Terminal=false
          Categories=Settings;Utility;
          StartupNotify=true
          EOF

          sed -i 's/\r$//' "$TMP_DU" || true
          sudo install -m 0755 "$TMP_DU" "$UN_DESKTOP_SYS"
          rm -f "$TMP_DU"

          command -v xdg-desktop-menu >/dev/null && xdg-desktop-menu forceupdate || true
          command -v update-desktop-database >/dev/null && sudo update-desktop-database || true

      - name: Copy UNINSTALL Desktop icon to ALL user desktops (best-effort)
        shell: bash
        run: |
          set -euo pipefail
          UN_DESKTOP_SYS="${{ steps.vars.outputs.UN_DESKTOP_SYS }}"
          DISPLAY_NAME="${{ steps.vars.outputs.DISPLAY_NAME }}"

          for u in $(getent passwd | awk -F: '$3>=1000 && $3<65000 {print $1}'); do
            home="$(getent passwd "$u" | cut -d: -f6)"
            [ -d "$home" ] || continue
            mkdir -p "$home/Desktop"
            dst="$home/Desktop/${DISPLAY_NAME}_uninstall.desktop"
            sudo cp -f "$UN_DESKTOP_SYS" "$dst"
            sudo chown "$u:$u" "$dst"
            sudo chmod +x "$dst"
            if command -v gio >/dev/null 2>&1; then
              sudo -u "$u" gio set "$dst" "metadata::trusted" true || true
            fi
            echo "Placed uninstall desktop icon for user $u at $dst"
          done

      - name: Summary
        shell: bash
        run: |
          echo "Installed:"
          echo "  Launcher script : ${{ steps.vars.outputs.SCRIPT_PATH }}"
          echo "  Menu entry      : ${{ steps.vars.outputs.DESKTOP_SYS }}"
          echo "  Uninstall script: ${{ steps.vars.outputs.UN_SCRIPT_PATH }}"
          echo "  Uninstall menu  : ${{ steps.vars.outputs.UN_DESKTOP_SYS }}"
          echo "  Model base dir  : ${{ steps.vars.outputs.HOST_MODEL_DIR }}"
          echo
          echo "Desktop icons were copied to all real users under /home (best-effort)."
          echo "Click '${{ steps.vars.outputs.DISPLAY_NAME }}' to run, or '${{ steps.vars.outputs.DISPLAY_NAME }}_uninstall' to remove."
