name: Deploy GUI launcher to Pi (with Uninstall)

on:
  workflow_dispatch:
    inputs:
      image-name:
        description: "Application image name (GHCR repo, e.g. ghcr.io/tonu1990/gstreamer_demo)"
        required: true
        type: string
        default: ""
      tag:
        description: "Image tag (used only if image-name has no tag/digest)"
        required: false
        type: string
        default: "latest"
      container-name:
        description: "Name for menu/desktop display (Docker name derives from a safe slug)"
        required: false
        type: string
        default: "EdgeAI_Pi5"
      extra-args:
        description: "Additional docker run args (e.g. --device /dev/dri:/dev/dri --group-add render)"
        required: false
        type: string
        default: ""

jobs:
  deploy-to-pi:
    runs-on: [self-hosted, pi5, app_model_cd]

    steps:
      - name: Resolve inputs and compute image ref + names
        id: vars
        shell: bash
        run: |
          set -euo pipefail

          IMAGE_NAME="${{ github.event.inputs['image-name'] }}"
          TAG="${{ github.event.inputs.tag }}"
          CN_RAW="${{ github.event.inputs['container-name'] }}"
          EXTRA_ARGS="${{ github.event.inputs['extra-args'] }}"

          if [[ -z "$IMAGE_NAME" ]]; then
            echo "image-name is required" >&2
            exit 1
          fi

          # Final image reference
          if [[ "$IMAGE_NAME" == *@sha256:* ]]; then
            IMAGE_REF="$IMAGE_NAME"
          elif [[ "$IMAGE_NAME" =~ :[^/]+$ ]]; then
            IMAGE_REF="$IMAGE_NAME"
          else
            IMAGE_REF="${IMAGE_NAME}:${TAG:-latest}"
          fi

          # Menu label (display name)
          DISPLAY_NAME="${CN_RAW:-EdgeAI_Pi5}"

          # Safe slug for docker --name and filenames
          SLUG="$(printf '%s' "$DISPLAY_NAME" \
            | tr '[:upper:]' '[:lower:]' \
            | sed -E 's/[[:space:]]+/-/g; s/[^a-z0-9._-]//g')"
          [[ -n "$SLUG" ]] || SLUG="edgeai_pi5"

          # Paths
          SCRIPT_PATH="/usr/local/bin/${SLUG}.sh"
          DESKTOP_SYS="/usr/share/applications/${SLUG}.desktop"
          UN_SCRIPT_PATH="/usr/local/sbin/${SLUG}_uninstall.sh"
          UN_DESKTOP_SYS="/usr/share/applications/${SLUG}_uninstall.desktop"

          echo "IMAGE_REF=$IMAGE_REF"            >> "$GITHUB_OUTPUT"
          echo "DISPLAY_NAME=$DISPLAY_NAME"      >> "$GITHUB_OUTPUT"
          echo "SLUG=$SLUG"                      >> "$GITHUB_OUTPUT"
          echo "SCRIPT_PATH=$SCRIPT_PATH"        >> "$GITHUB_OUTPUT"
          echo "DESKTOP_SYS=$DESKTOP_SYS"        >> "$GITHUB_OUTPUT"
          echo "UN_SCRIPT_PATH=$UN_SCRIPT_PATH"  >> "$GITHUB_OUTPUT"
          echo "UN_DESKTOP_SYS=$UN_DESKTOP_SYS"  >> "$GITHUB_OUTPUT"
          echo "EXTRA_ARGS=$EXTRA_ARGS"          >> "$GITHUB_OUTPUT"

      - name: Require sudo and install GUI helpers
        shell: bash
        run: |
          if ! sudo -n true 2>/dev/null; then
            echo "Needs passwordless sudo on the runner to write system paths." >&2
            exit 1
          fi
          # Ensure zenity (GUI prompts) and policykit (pkexec) exist
          sudo apt-get update -y
          sudo apt-get install -y zenity policykit-1 xdg-utils || true

      - name: Pre-pull image (faster first launch)
        shell: bash
        run: |
          set -euo pipefail
          /usr/bin/docker pull "${{ steps.vars.outputs.IMAGE_REF }}"

      - name: Install launcher script (/usr/local/bin/<slug>.sh)
        shell: bash
        run: |
          set -euo pipefail
          IMAGE="${{ steps.vars.outputs.IMAGE_REF }}"
          SLUG="${{ steps.vars.outputs.SLUG }}"
          SCRIPT_PATH="${{ steps.vars.outputs.SCRIPT_PATH }}"
          EXTRA_ARGS="${{ steps.vars.outputs.EXTRA_ARGS }}"

          TMP_SCRIPT="$(mktemp)"
          cat > "$TMP_SCRIPT" << 'EOSH'
          #!/usr/bin/env bash
          set -euo pipefail

          DOCKER=/usr/bin/docker
