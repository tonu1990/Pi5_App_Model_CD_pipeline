name: Model CD - Deploy Model Artifacts(.ONNX and labels) to Pi

on:
  workflow_dispatch:
    inputs:
      model-source:
        description: >
          "GithubRelease" to deploy from GitHub Release;
          "GithubRepo" to upload to Github release, then deploy
        type: choice
        required: true
        default: GithubRelease
        options:
          - GithubRelease
          - GithubRepo
      release-version:
        description: 'GitHub Release Version (ignored in GithubRepo mode)'
        required: false
        default: 'latest'
      pi-project-dir:
        description: 'Model Artifacts directory on Pi. Leave empty to use the repo name'
        required: false
        default: ''
      artifact_glob:
        description: >
          (GithubRepo mode) Directory containing artifacts (e.g. Model_dev/artifacts).
          Exactly one .onnx must be present; an optional .json in the same directory
          will be deployed to Pi as labels.json.
        required: false
        default: Model_dev/artifacts

permissions:
  contents: write

concurrency:
  group: model-cd
  cancel-in-progress: true

jobs:
  prepare:
    name: Prepare Model Bundle
    runs-on: ubuntu-latest
    outputs:
      model_name:     ${{ steps.name-outputs.outputs.model_name }}
      model_sha:      ${{ steps.hash.outputs.model_sha }}
      short_sha:      ${{ steps.hash.outputs.short_sha }}
      utc_stamp:      ${{ steps.utc.outputs.utc_stamp }}
      source_tag:     ${{ steps.rel.outputs.tag_name || steps.upload-release.outputs.tag_name || 'latest' }}
      pi_project_name: ${{ steps.repo-config.outputs.pi_project_name }}
      has_labels:     ${{ steps.labels-detect.outputs.has_labels }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure project name
        id: repo-config
        shell: bash
        run: |
          if [ -z "${{ github.event.inputs.pi-project-dir }}" ]; then
            PI_PROJECT_NAME="${{ github.event.repository.name }}"
            echo "Using repository name as project directory: $PI_PROJECT_NAME"
          else
            PI_PROJECT_NAME="${{ github.event.inputs.pi-project-dir }}"
            echo "Using user-specified project directory: $PI_PROJECT_NAME"
          fi
          PI_PROJECT_NAME=$(echo "$PI_PROJECT_NAME" | sed 's/[./]//g')
          echo "Sanitized project name: $PI_PROJECT_NAME"
          echo "pi_project_name=$PI_PROJECT_NAME" >> $GITHUB_OUTPUT

      # =========================
      # GithubRepo MODE
      # =========================
      - name: Find artifacts in repository (GithubRepo mode)
        id: find-onnx
        if: ${{ github.event.inputs.model-source == 'GithubRepo' }}
        shell: bash
        run: |
          set -euo pipefail
          ART_DIR="${{ github.event.inputs.artifact_glob }}"
          echo "Artifact directory: $ART_DIR"
          test -d "$ART_DIR" || { echo "❌ Directory not found: $ART_DIR"; exit 1; }

          # Find ONNX (must be exactly one)
          mapfile -t onnx_files < <(find "$ART_DIR" -maxdepth 1 -type f -name '*.onnx' | sort)
          if [ "${#onnx_files[@]}" -eq 0 ]; then
            echo "❌ No .onnx found in $ART_DIR"; exit 1
          fi
          if [ "${#onnx_files[@]}" -gt 1 ]; then
            echo "❌ Multiple .onnx files found in $ART_DIR. Please keep exactly one:"
            printf ' - %s\n' "${onnx_files[@]}"
            exit 1
          fi
          SELECTED_ONNX="${onnx_files[0]}"
          echo "✅ Using ONNX: $SELECTED_ONNX"
          echo "MODEL_PATH=$SELECTED_ONNX" >> $GITHUB_ENV
          echo "model_name=$(basename "$SELECTED_ONNX")" >> $GITHUB_OUTPUT

          # Prefer a file named labels.json; else first *.json (optional)
          LABELS=""
          if [ -f "$ART_DIR/labels.json" ]; then
            LABELS="$ART_DIR/labels.json"
          else
            # any json in dir (but not recursive)
            mapfile -t json_files < <(find "$ART_DIR" -maxdepth 1 -type f -name '*.json' | sort)
            if [ "${#json_files[@]}" -ge 1 ]; then
              LABELS="${json_files[0]}"
            fi
          fi

          if [ -n "$LABELS" ]; then
            echo "Found labels JSON: $LABELS"
            echo "LABELS_PATH=$LABELS" >> $GITHUB_ENV
          else
            echo "No labels JSON found; proceeding without labels."
          fi

      - name: Upload to GitHub Release (GithubRepo mode)
        id: upload-release
        if: ${{ github.event.inputs.model-source == 'GithubRepo' }}
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ github.token }}
        with:
          script: |
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            const fs = require('fs');
            const modelPath = process.env.MODEL_PATH;
            const modelName = require('path').basename(modelPath);

            console.log(`Uploading ${modelName} to GitHub Release tag 'latest'`);

            let release;
            try {
              release = await github.rest.repos.getReleaseByTag({ owner, repo, tag: 'latest' });
              console.log(`Found existing 'latest' release`);
            } catch (e) {
              if (e.status === 404) {
                release = await github.rest.repos.createRelease({
                  owner, repo, tag_name: 'latest', name: 'Latest Model',
                  draft: false, prerelease: false
                });
                console.log(`Created new 'latest' release`);
              } else {
                core.setFailed(`Error accessing releases: ${e.message}`);
                return;
              }
            }

            // Delete existing .onnx assets to keep only one canonical model in 'latest'
            const assets = (await github.rest.repos.listReleaseAssets({
              owner, repo, release_id: release.data.id
            })).data;

            const toDelete = assets.filter(a => a.name && a.name.toLowerCase().endsWith('.onnx'));
            for (const a of toDelete) {
              await github.rest.repos.deleteReleaseAsset({ owner, repo, asset_id: a.id });
              console.log(`Deleted existing model asset: ${a.name}`);
            }

            const stat = fs.statSync(modelPath);
            const data = fs.readFileSync(modelPath);

            await github.rest.repos.uploadReleaseAsset({
              owner, repo, release_id: release.data.id, name: modelName, data,
              headers: { 'content-type': 'application/octet-stream', 'content-length': stat.size }
            });

            core.setOutput('tag_name', 'latest');
            core.setOutput('asset_name', modelName);

      - name: Set release outputs for GithubRepo mode
        if: ${{ github.event.inputs.model-source == 'GithubRepo' }}
        shell: bash
        run: |
          echo "tag_name=latest" >> $GITHUB_OUTPUT
          echo "asset_name=${{ steps.find-onnx.outputs.model_name }}" >> $GITHUB_OUTPUT

      # =========================
      # GithubRelease MODE
      # =========================
      - name: Get release & select .onnx asset (GithubRelease mode)
        id: rel
        if: ${{ github.event.inputs.model-source == 'GithubRelease' }}
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ github.token }}
        with:
          script: |
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            const releaseVersion = '${{ github.event.inputs.release-version }}' || 'latest';

            console.log(`Fetching release: ${releaseVersion}`);

            try {
              let release;
              if (releaseVersion === 'latest') {
                release = await github.rest.repos.getLatestRelease({ owner, repo });
              } else {
                release = await github.rest.repos.getReleaseByTag({ owner, repo, tag: releaseVersion });
              }

              const assets = release.data.assets || [];
              const onnxAssets = assets.filter(a => a.name && a.name.toLowerCase().endsWith('.onnx'));
              if (onnxAssets.length === 0) {
                core.setFailed(`No .onnx assets found in release "${release.data.tag_name}"`);
                return;
              }

              const onnx = onnxAssets[0];
              console.log(`Selected ONNX asset: ${onnx.name}`);

              core.setOutput('tag_name', release.data.tag_name);
              core.setOutput('asset_id', String(onnx.id));
              core.setOutput('asset_name', onnx.name);

            } catch (error) {
              if (error.status === 404) {
                if (releaseVersion === 'latest') {
                  core.setFailed(`No releases found in this repository. Please create a release first.`);
                } else {
                  core.setFailed(`Release '${releaseVersion}' not found.`);
                }
              } else {
                core.setFailed(`Error: ${error.message}`);
              }
            }

      - name: Download ONNX asset (GithubRelease mode)
        id: download-release
        if: ${{ github.event.inputs.model-source == 'GithubRelease' }}
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set -euo pipefail
          ASSET_ID='${{ steps.rel.outputs.asset_id }}'
          ASSET_NAME='${{ steps.rel.outputs.asset_name }}'
          REPOSITORY='${{ github.repository }}'

          echo "Downloading asset: $ASSET_NAME"
          curl -sSL \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/octet-stream" \
            -o "$ASSET_NAME" \
            "https://api.github.com/repos/${REPOSITORY}/releases/assets/$ASSET_ID"

          echo "MODEL_PATH=$ASSET_NAME" >> $GITHUB_ENV

      # =========================
      # Common post-acquisition
      # =========================
      - name: Normalize filenames and capture outputs
        id: name-outputs
        shell: bash
        run: |
          set -euo pipefail
          # Ensure model is in workspace and record model_name
          MODEL_BASENAME="$(basename "${MODEL_PATH}")"
          if [ ! -f "$MODEL_BASENAME" ]; then
            cp "$MODEL_PATH" "$MODEL_BASENAME"
          fi
          echo "Model file: $MODEL_BASENAME"
          echo "model_name=$MODEL_BASENAME" >> $GITHUB_OUTPUT
          echo "MODEL_PATH=$MODEL_BASENAME" >> $GITHUB_ENV

      - name: Detect and stage labels.json (GithubRepo mode)
        id: labels-detect
        if: ${{ github.event.inputs.model-source == 'GithubRepo' }}
        shell: bash
        run: |
          set -euo pipefail
          HAS="false"
          if [ -n "${LABELS_PATH:-}" ] && [ -f "${LABELS_PATH}" ]; then
            echo "Staging labels from: ${LABELS_PATH}"
            cp "${LABELS_PATH}" "labels.json"
            HAS="true"
          fi
          echo "has_labels=$HAS" >> $GITHUB_OUTPUT
          echo "HAS_LABELS=$HAS" >> $GITHUB_ENV

      - name: Show file size (sanity check)
        shell: bash
        run: |
          BYTES=$(stat -c%s "$MODEL_PATH")
          echo "Model file: $MODEL_PATH"
          echo "Size: $BYTES bytes"
          echo "Mode: ${{ github.event.inputs.model-source }}"
          echo "Release: ${{ steps.rel.outputs.tag_name || steps.upload-release.outputs.tag_name || 'latest' }}"

      - name: Compute sha256 (identity)
        id: hash
        shell: bash
        run: |
          SHA=$(sha256sum "$MODEL_PATH" | cut -d' ' -f1)
          echo "sha256: $SHA"
          echo "$SHA  $(basename "$MODEL_PATH")" > sha256.txt
          echo "model_sha=$SHA" >> $GITHUB_OUTPUT
          echo "short_sha=${SHA:0:12}" >> $GITHUB_OUTPUT

      - name: UTC timestamp
        id: utc
        shell: bash
        run: echo "utc_stamp=$(date -u +%Y%m%d-%H%M)" >> $GITHUB_OUTPUT

      - name: Build manifest.json
        shell: bash
        run: |
          HAS_LABELS="${HAS_LABELS:-false}"
          cat > manifest.json << JSON
          {
            "model_id_sha256": "${{ steps.hash.outputs.model_sha }}",
            "filename":       "${{ steps.name-outputs.outputs.model_name }}",
            "deployed_at_utc":"${{ steps.utc.outputs.utc_stamp }}",
            "source_repository":"${{ github.repository }}",
            "source_release":  "${{ steps.rel.outputs.tag_name || steps.upload-release.outputs.tag_name || 'latest' }}",
            "deployment_mode": "${{ github.event.inputs.model-source }}",
            "pi_project_directory":"${{ steps.repo-config.outputs.pi_project_name }}",
            "labels_included": ${HAS_LABELS}
          }
          JSON
          cat manifest.json

      - name: Upload deployment bundle
        uses: actions/upload-artifact@v4
        with:
          name: model-bundle
          path: |
            ${{ env.MODEL_PATH }}
            sha256.txt
            manifest.json
            labels.json
          if-no-files-found: ignore

  deliver:
    name: Deploy to Pi
    needs: prepare
    runs-on: [self-hosted, app_model_cd]
    steps:
      - name: Clean workspace
        if: always()
        run: |
          echo "Cleaning workspace..."
          find . -name "*.onnx" -type f -delete || true
          rm -f sha256.txt manifest.json labels.json || true

      - name: Download deployment bundle
        uses: actions/download-artifact@v4
        with:
          name: model-bundle

      - name: Show deployment info
        run: |
          echo "Deploying model to Pi"
          echo "Source repository: ${{ github.repository }}"
          echo "Source release: ${{ needs.prepare.outputs.source_tag }}"
          echo "Deployment mode: ${{ github.event.inputs.model-source }}"
          echo "Pi project directory: ${{ needs.prepare.outputs.pi_project_name }}"
          echo "Files:"
          ls -l

      - name: Create project directory structure on Pi
        id: setup-dirs
        shell: bash
        run: |
          PI_PROJECT_NAME="${{ needs.prepare.outputs.pi_project_name }}"
          TARGET_BASE="/opt/edge/$PI_PROJECT_NAME"

          sudo mkdir -p "$TARGET_BASE/models" "$TARGET_BASE/manifests" "$TARGET_BASE/tmp"
          sudo touch "$TARGET_BASE/deployments.log"
          sudo chown -R $USER:$USER "$TARGET_BASE" || true
          sudo chmod -R 755 "$TARGET_BASE"

          echo "target_base=$TARGET_BASE" >> $GITHUB_OUTPUT
          echo "Project base created at: $TARGET_BASE"
          ls -la "$TARGET_BASE"

      - name: Verify project directory exists on Pi
        shell: bash
        run: |
          TARGET_BASE="${{ steps.setup-dirs.outputs.target_base }}"
          test -d "$TARGET_BASE" && test -d "$TARGET_BASE/models" && test -d "$TARGET_BASE/manifests" && test -d "$TARGET_BASE/tmp" && test -f "$TARGET_BASE/deployments.log"
          echo "✓ Project directories verified"

      - name: Verify sha256 on Pi (integrity check)
        id: verify
        shell: bash
        run: |
          set -e
          FILE="$(find . -maxdepth 2 -type f -name '*.onnx' | head -n1)"
          echo "Model candidate: $FILE"
          SHA_LOCAL="$(sha256sum "$FILE" | cut -d' ' -f1)"
          SHA_EXPECT="${{ needs.prepare.outputs.model_sha }}"
          echo "Local SHA: $SHA_LOCAL"
          echo "Expected SHA: $SHA_EXPECT"
          test "$SHA_LOCAL" = "$SHA_EXPECT" || (echo "SHA256 mismatch"; exit 1)
          echo "ok=true" >> $GITHUB_OUTPUT

      - name: Idempotency check (skip if already current)
        id: idem
        shell: bash
        run: |
          set -e
          TARGET_BASE="${{ steps.setup-dirs.outputs.target_base }}"
          EXPECT="${{ needs.prepare.outputs.model_sha }}"

          if [ -L "$TARGET_BASE/current.onnx" ]; then
            CUR="$(readlink -f "$TARGET_BASE/current.onnx")"
            CUR_SHA="$(sha256sum "$CUR" | cut -d' ' -f1)"
            if [ "$CUR_SHA" = "$EXPECT" ]; then
              echo "skip=true" >> $GITHUB_OUTPUT
              echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) ALREADY-CURRENT model_id=$EXPECT" >> "$TARGET_BASE/deployments.log"
              exit 0
            fi
          fi
          echo "skip=false" >> $GITHUB_OUTPUT

      - name: Check free disk space (need > 200MB)
        if: steps.idem.outputs.skip != 'true'
        shell: bash
        run: |
          TARGET_BASE="${{ steps.setup-dirs.outputs.target_base }}"
          AVAIL_KB=$(df -Pk "$TARGET_BASE" | awk 'NR==2{print $4}')
          REQ_KB=200000
          echo "Available: ${AVAIL_KB} KB"
          [ "$AVAIL_KB" -ge "$REQ_KB" ] || { echo "Not enough disk space"; exit 1; }

      - name: Stage, move, and atomic switch
        if: steps.idem.outputs.skip != 'true'
        shell: bash
        run: |
          set -e
          FILE="$(find . -maxdepth 2 -type f -name '*.onnx' | head -n1)"
          MODEL_ID="${{ needs.prepare.outputs.model_sha }}"
          SHORT="${{ needs.prepare.outputs.short_sha }}"
          STAMP="${{ needs.prepare.outputs.utc_stamp }}"
          MODEL_FILE="${{ needs.prepare.outputs.model_name }}"
          MODEL_BASENAME="${MODEL_FILE%.*}"
          TARGET_BASE="${{ steps.setup-dirs.outputs.target_base }}"

          FINAL="$TARGET_BASE/models/${MODEL_BASENAME}-${STAMP}-${SHORT}.onnx"
          MANIFEST_FINAL="$TARGET_BASE/manifests/${MODEL_BASENAME}-${MODEL_ID}.json"

          STAGE="$TARGET_BASE/tmp/$MODEL_ID"
          sudo mkdir -p "$STAGE"
          sudo cp "$FILE" "$STAGE/model.onnx"
          sudo cp manifest.json "$STAGE/manifest.json"

          sudo mv "$STAGE/model.onnx" "$FINAL"
          sudo mv "$STAGE/manifest.json" "$MANIFEST_FINAL"
          sudo rmdir "$STAGE" || true

          if [ -L "$TARGET_BASE/current.onnx" ]; then
            OLD="$(readlink -f "$TARGET_BASE/current.onnx")"
            sudo ln -sfn "$OLD" "$TARGET_BASE/previous.onnx"
          fi
          sudo ln -sfnr "$FINAL" "$TARGET_BASE/current.onnx"

          echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) DEPLOY model_id=$MODEL_ID file=$(basename "$FINAL")" | sudo tee -a "$TARGET_BASE/deployments.log" > /dev/null

          echo "current.onnx -> $(readlink -f "$TARGET_BASE/current.onnx")"
          [ -L "$TARGET_BASE/previous.onnx" ] && echo "previous.onnx -> $(readlink -f "$TARGET_BASE/previous.onnx")" || echo "previous.onnx not set"

      - name: Install/Update labels.json if present (runs even on skip)
        shell: bash
        run: |
          set -e
          TARGET_BASE="${{ steps.setup-dirs.outputs.target_base }}"
          if [ -f "labels.json" ]; then
            echo "Installing labels.json to $TARGET_BASE/labels.json"
            sudo cp -f "labels.json" "$TARGET_BASE/labels.json"
            sudo chown $USER:$USER "$TARGET_BASE/labels.json" || true
            echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) LABELS updated" | sudo tee -a "$TARGET_BASE/deployments.log" > /dev/null
          else
            echo "No labels.json provided in bundle."
          fi

      - name: Retain last 10 models (prune older)
        if: steps.idem.outputs.skip != 'true'
        shell: bash
        run: |
          set -e
          TARGET_BASE="${{ steps.setup-dirs.outputs.target_base }}"
          MODELS_DIR="$TARGET_BASE/models"
          cd "$MODELS_DIR" || exit 0
          ls -1t *.onnx > /tmp/models_all.txt 2>/dev/null || true
          head -n 10 /tmp/models_all.txt > /tmp/keep.txt 2>/dev/null || true
          tail -n +11 /tmp/models_all.txt > /tmp/cand_delete.txt 2>/dev/null || true

          CUR="$(readlink -f "$TARGET_BASE/current.onnx" 2>/dev/null || true)"
          PREV="$(readlink -f "$TARGET_BASE/previous.onnx" 2>/dev/null || true)"

          while read -r f; do
            [ -z "$f" ] && continue
            ABS="$MODELS_DIR/$f"
            [ "$ABS" = "$CUR" ] && { echo "Keep (current): $f"; continue; }
            [ -n "$PREV" ] && [ "$ABS" = "$PREV" ] && { echo "Keep (previous): $f"; continue; }
            echo "Deleting old model: $f"
            sudo rm -f -- "$ABS"
            MANIFEST_NAME="${f%.*}"
            sudo rm -f "$TARGET_BASE/manifests/$MANIFEST_NAME-*.json" 2>/dev/null || true
          done < /tmp/cand_delete.txt

      - name: Show deployment result
        run: |
          TARGET_BASE="${{ steps.setup-dirs.outputs.target_base }}"
          echo "=== Deployment Complete ==="
          echo "Base directory: $TARGET_BASE"
          echo "=== Tree ==="
          ls -la "$TARGET_BASE/"
          echo "=== Models ==="
          ls -la "$TARGET_BASE/models/" || echo "No models directory"
          echo "=== Manifests ==="
          ls -la "$TARGET_BASE/manifests/" || echo "No manifests directory"
          echo "=== Symlinks ==="
          ls -la "$TARGET_BASE/current.onnx" 2>/dev/null || echo "No current.onnx symlink"
          ls -la "$TARGET_BASE/previous.onnx" 2>/dev/null || echo "No previous.onnx symlink"
          echo "=== Labels ==="
          ls -la "$TARGET_BASE/labels.json" 2>/dev/null || echo "No labels.json"
